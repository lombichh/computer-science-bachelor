<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Documento senza titolo</title>
<style type="text/css">
<!--
.Stile2 {font-family: Arial, Helvetica, sans-serif}
.Stile3 {font-family: "Courier New", Courier, mono}
-->
</style>
</head>
<body bgcolor="#FFFFFF">
<h3 align="center" class="Stile2">Sistemi Operativi L-A </h3>
<h2 align="center" class="Stile2">Compito A del 25 Luglio 2006</h2>
<p align="center" class="Stile2">CdS in Ingegneria Informatica - Prof. Paolo Bellavista 
</p>
<p align="center" class="Stile2">&nbsp;</p>
<p align="center" class="Stile2"><strong>Parte di Programmazione di Sistema </strong>(16 punti)</p>
<p align="justify" class="Stile2"><font face="Arial, Helvetica, sans-serif">Si 
  scriva un programma C che, utilizzando le system call del sistema operativo 
  UNIX, abbia un'interfaccia del tipo</font></p>
<p align="center" class="Stile2"><font face="Arial, Helvetica, sans-serif"><strong> 
  compito250706A fileIn fileOut </strong></font></p>
<p align="justify" class="Stile2"><font face="Arial, Helvetica, sans-serif">dove 
  <strong>fileIn</strong> e <strong> fileOut </strong> sono nomi assoluti di file 
  (<strong>fileIn</strong> supposto gi&agrave; presente nel file system, <strong>fileOut</strong> 
  da creare).</font></p>
<p align="justify" class="Stile2"><font face="Arial, Helvetica, sans-serif">Dopo 
  aver effettuato gli opportuni controlli sugli argomenti, il processo iniziale 
  <strong>P0</strong> deve generare due processi <strong>P1</strong> e <b>P2</b> 
  nella relazione di parentela ritenuta pi&ugrave; opportuna. Il file <b>fileIn</b> 
  &egrave; un file di testo che contiene un numero intero (di lunghezza qualsiasi 
  ma rappresentabile nel range del tipo int) in ogni riga. Dopo aver determinato 
  il numero di righe <i>n</i> contenute in <b>fileIn</b>, il processo <strong>P0</strong> 
  deve leggere le prime <i>n/3</i> righe per andare a determinare quali sono il 
  massimo e il minimo contenuti nella porzione di file di sua competenza. Analoga 
  operazione deve essere svolta <u>in paralllelo</u> da <b>P1</b> sul secondo 
  terzo del file e da <b>P2</b> sull'ultimo terzo. <br>
  Non appena hanno terminato l'elaborazione sul proprio terzo del file, i tre 
  processi devono scambiarsi il massimo e il minimo trovati al fine di determinare 
  quali sono i valori massimo e minimo assoluti del file. In particolare, il processo 
  che ha trovato il valore massimo assoluto dovr&agrave; scriverlo su <b>fileOut</b> 
  cosiccome il processo che ha trovato il minimo assoluto dovr&agrave; scriverlo 
  sullo stesso <b>fileOut</b>. <br/>
  <u>Deve essere rispettato il seguente vincolo di sincronizzazione</u>: il massimo 
  assoluto dovr&agrave; essere scritto su <b>fileOut</b> SEMPRE PRIMA del minimo 
  assoluto. <br/>
  Come sempre, si facciano le scelte di sincronizzazione dei processi ritenute 
  pi&ugrave; opportune, cercando di sequenzializzare il meno possibile le varie 
  operazioni richieste. </font></p>
<p align="justify" class="Stile2"><font size="2">P.S.: Si ricorda l'esistenza 
  delle funzioni di libreria<br>
  <span class="Stile3">int sprintf(char *str, char* format, ...); <font face="Arial, Helvetica, sans-serif">ad 
  </font></span></font><font size="2" face="Arial, Helvetica, sans-serif"><span class="Stile3">esempio 
  </span></font><font size="2"><span class="Stile3">sprintf(s1,&quot;%d&quot;,x);<br/>
  long strtol(char *str, char **ptr, int base); <font face="Arial, Helvetica, sans-serif">ad 
  esempio </font>x=strtol(s1,null,10);<br/>
  <span class="Stile2">per la conversione da int a string e da stringa a int, 
  rispettivamente. </span></span></font></p>

<h3 align="center" class="Stile2">&nbsp;</h3>
<p align="center" class="Stile2"><strong>Parte di Programmazione UNIX Shell </strong>(8 
  punti)</p>
<p align="justify" class="Stile2">Si scriva un file comandi in Shell di UNIX che abbia un'interfaccia del tipo</p>
<p align="center" class="Stile2"><strong>condir.sh dir dir1 ... dirN </strong></p>
<p align="justify" class="Stile2"> Dove <strong>dir</strong> &egrave; un direttorio 
  assoluto che deve esistere nel file system mentre <strong>dir1 </strong>...<strong> 
  dirN </strong> sono un numero N qualsiasi, non noto a priori, di nomi di direttori 
  relativi.</p>
<p align="justify" class="Stile2">Il compito del file comandi &egrave; quello 
  di verificare se <strong>dir1</strong> ... <strong>dirN</strong> sono tutti 
  direttori contenuti nel sottoalbero individuato da <strong>dir</strong>. In 
  caso affermativo, il comando deve stampare <em>&quot;Tutti i direttori trovati!&quot;</em>, 
  mentre in caso negativo deve stampare <em>&quot;Direttori rimanenti: &quot;</em> 
  seguito dalla lista dei direttori che non sono stati trovati.</p>
<p align="justify" class="Stile2"><em>Suggerimento</em>: si utilizzi un file di appoggio in cui memorizzare l'elenco dei direttori relativi che ancora non sono stati trovati; rimuovere il file di appoggio al termine dell'esecuzione. </p>

</body>
</html>
